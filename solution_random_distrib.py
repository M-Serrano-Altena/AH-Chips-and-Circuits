from src.classes.chip import Chip
from src.algorithms.utils import COLLISION_COST
from src.algorithms import random_algo as ra
import os
from sys import argv
import matplotlib.pyplot as plt

# BASE_DIR = os.path.dirname(__file__)
# os.chdir(BASE_DIR)

OUTPUT_FOLDER = "output"

base_data_path = r"data/"
chip_id = 1
net_id = 4

if len(argv) >= 2:
    chip_id = argv[1]

if len(argv) == 3:
    net_id = argv[2]


iterations = 0
total_costs = []

for i in range(iterations):
    print(i)
    chip = Chip(base_data_path, chip_id=chip_id, net_id=net_id, output_folder=OUTPUT_FOLDER)
    algorithm = ra.Random_random(chip, max_offset=30, allow_short_circuit=True, sort_wires=True, random_seed=i)
    algorithm.run()
    cost = chip.calc_total_grid_cost()
    if cost < COLLISION_COST:
        total_costs.append(cost)

print(total_costs)
total_costs = [38739, 45947, 40217, 45660, 42362, 55033, 41994, 54411, 60405, 40858, 40234, 46870, 60793, 56239, 52909, 50168, 56811, 49266, 52919, 52919, 51697, 55929, 57161, 61979, 57735, 49877, 52009, 55911, 64679, 46291, 43203, 54409, 48091, 47471, 35066, 49646, 44513, 49899, 49235, 58622, 43208, 47739, 49289, 51697, 48964, 49933, 54102, 51389, 55912, 49911, 56497, 51420, 57769, 45083, 52304, 64395, 41155, 56221, 52008, 60167, 53451, 42040, 49615, 47739, 52920, 48663, 55031, 38415, 57454, 55035, 55307, 63775, 62899, 59905, 35697, 39326, 45651, 50801, 43238, 54698, 50473, 58334, 37483, 39276, 46248, 55323, 52310, 56229, 52629, 49620, 50851, 54169, 50195, 55011, 62610, 47429, 59255, 48971, 44167, 41425, 48986, 46859, 58379, 55011, 52973, 49000, 45679, 48660, 56515, 46257, 44438, 47505, 54448, 51725, 58332, 56178, 48994, 39944, 48705, 46874, 48372, 49007, 45941, 38728, 51680, 49300, 54718, 43819, 44103, 51057, 52615, 45067, 41995, 48679, 50201, 52024, 57411, 47813, 52629, 52327, 53245, 50497, 55617, 54429, 38704, 42627, 65551, 45371, 47155, 48356, 46237, 53531, 48671, 52927, 43265, 50229, 54423, 51417, 45939, 63507, 50164, 49557, 55341, 61649, 39261, 50783, 46853, 46563, 60426, 58049, 39923, 52315, 48373, 62305, 44803, 48072, 47520, 41415, 63151, 43241, 47168, 56513, 46531, 47778, 50212, 52919, 56591, 49306, 53818, 56194, 42610, 52933, 51436, 56222, 51681, 39336, 49249, 63119, 50815, 42682, 45039, 45711, 53523, 51405, 45381, 44434, 50825, 51673, 49306, 52268, 57420, 45067, 54138, 51993, 41428, 55071, 47460, 36586, 47470, 46849, 41725, 41093, 44768, 65001, 44202, 52006, 35083, 58301, 55940, 58589, 43903, 54397, 44755, 55009, 49859, 48634, 51731, 43267, 51991, 61947, 38129, 49344, 49596, 52907, 46601, 55945, 55923, 48389, 52903, 49250, 54428, 45661, 51653, 46925, 39341, 44138, 53855, 54411, 48081, 48673, 52635, 60729, 56526, 39629, 43847, 48359, 58639, 49009, 57457, 46561, 45649, 45033, 48688, 42968, 50495, 59885, 52326, 39291, 44773, 46889, 50520, 50780, 51682, 35426, 54456, 52029, 42940, 52954, 58065, 47496, 60755, 60165, 53239, 55312, 48335, 49003, 45930, 50800, 50498, 54127, 45956, 45053, 50824, 55071, 42989, 47770, 44457, 50503, 39313, 46839, 56837, 43223, 39334, 48975, 58928, 48088, 50517, 51378, 42036, 56261, 48697, 55615, 43246, 55612, 43823, 45023, 54684, 46002, 55877, 59879, 46523, 43252, 53246, 48098, 48377, 47497, 43862, 44437, 60786, 46556, 49858, 52053, 49919, 69189, 45383, 50786, 51988, 61701, 50205, 46025, 53207, 51658, 51707, 52338, 46536, 56234, 50509, 37229, 49261, 51678, 54398, 45946, 56852, 59257, 47786, 49566, 55586, 57714, 46529, 56213, 51096, 60787, 45074, 46881, 52924, 56545, 50477, 48732, 46555, 47501, 48712, 46594, 36018, 48685, 55907, 38058, 42024, 46879, 46263, 49581, 53182, 44737, 45375, 54117, 45085, 44765, 44413, 42937, 45913, 47812, 62565, 55911, 43263, 44445, 58669, 53214, 51735, 54125, 46566, 52913, 50189, 40527, 45375, 53519, 54737, 49283, 54088, 53538, 55033, 46902, 48143, 47428, 48673, 46293, 47141, 41107, 42933, 51414, 46541, 43880, 56233, 55627, 48393, 50221, 53205, 48047, 53263, 41739, 58673, 50518, 47185, 53537, 50483, 50195, 44766, 53517, 48701, 61667, 55964, 48425, 50456, 48349, 41755, 42904, 54746, 48957, 45029, 46218, 42031, 51071, 49560, 53790, 49571, 59565, 45365, 45380, 49274, 55013, 40790, 55953, 61065, 53213, 56192, 39536, 51436, 57450, 54099, 32654, 52570, 42651, 44171, 43865, 54988, 54427, 51119, 52282, 48402, 49577, 57440, 48407, 45637, 45975, 51402, 47219, 58634, 54451, 53504, 45964, 46915, 56244, 61036, 41721, 59887, 40555, 39918, 50518, 42321, 49868, 48675, 58364, 50784, 45952, 46834, 57129, 53502, 49278, 44172, 59273, 49850, 52305, 51380, 40258, 47469, 59260, 48672, 51719, 58017, 40226, 50213, 52595, 54415, 53524, 45693, 49878, 53188, 55679, 42667, 43883, 49911, 49289, 40837, 54162, 58038, 42088, 48959, 45624, 53209, 57715, 49311, 42648, 54110, 46880, 56238, 50533, 50495, 50818, 49555, 54705, 50792, 55310, 41403, 52907, 52012, 52002, 46219, 45357, 57755, 45296, 40505, 55976, 59285, 53827, 52604, 43281, 47779, 46251, 55338, 46587, 58071, 51083, 46582, 43252, 49267, 51931, 55013, 53503, 47793, 53809, 56522, 52347, 56518, 50174, 61953, 42989, 54725, 44504, 43527, 55348, 52024, 48974, 60751, 58043, 52923, 57121, 50503, 45030, 49900, 58976, 55089, 42957, 47195, 46877, 47774, 53218, 57761, 38390, 45639, 53841, 52609, 49261, 45658, 73121, 52297, 48049, 54148, 42937, 62262, 49875, 56840, 41767, 49016, 35045, 58025, 39588, 55301, 52247, 49947, 49289, 51729, 42951, 55046, 41105, 48687, 51105, 53767, 44723, 44775, 45908, 49878, 43883, 37482, 48076, 46264, 44159, 46567, 43788, 53239, 56512, 44489, 54418, 54681, 48987, 50781, 50499, 51651, 46540, 61979, 46860, 43870, 41109, 42665, 51972, 50190, 47490, 48378, 45106, 45990, 42955, 45327, 35991, 44461, 56568, 39004, 58386, 49309, 58083, 57723, 54721, 55615, 48652, 49876, 43268, 48091, 43496, 57696, 47509, 36925, 52595, 42935, 46548, 43918, 59599, 53782, 50779, 59269, 51127, 43837, 50202, 51398, 49283, 46274, 54095, 50189, 48963, 47723, 47459, 47778, 43570, 51394, 55598, 49550, 41743, 56241, 42930, 47225, 48972, 55625, 40540, 43518, 48059, 52627, 53823, 51432, 54739, 48692, 45931, 46248, 51980, 54398, 48669, 42331, 55069, 51415, 51735, 49864, 55351, 47791, 46322, 55347, 45682, 53502, 42920, 50223, 46870, 52619, 52637, 45635, 48665, 47179, 55912, 51711, 52050, 50503, 53464, 47195, 50186, 46243, 47753, 41113, 35382, 45672, 48328, 36912, 44744, 45094, 53183, 50791, 38378, 54405, 60130, 49917, 43246, 46882, 48057, 55965, 52619, 44721, 38947, 46881, 58929, 49239, 53831, 47759, 58981, 53480, 54427, 44440, 49310, 48663, 55317, 50159, 56239, 42369, 56207, 64655, 46260, 57705, 44740, 36873, 50229, 60449, 44433, 55323, 53246, 42006, 48022, 52601, 41125, 49284, 49295, 53807, 47755, 44412, 54977, 55043, 58983, 57425, 44418, 32929, 47521, 37543, 53511, 57441, 43856, 60160, 50522, 46285, 45978, 48060, 55961, 47769, 45991, 53852, 54401, 44462, 43567, 57415, 55048, 62615, 38374, 58077, 50801, 48703, 51395, 54151, 50823, 58946, 42043, 43848, 49916, 45661, 43841, 52291, 48407, 52045, 48999, 45060, 38715, 56828, 44739, 46860, 45959, 42949, 52892, 49885, 45883, 48989, 49595, 48372, 45621, 41738, 47523, 60783, 55301, 39007, 48366, 49902, 54439, 52596, 55605, 45328, 54415, 58309, 54725, 46883, 49607, 52006, 48063, 51991, 58358, 48981, 51083, 47778, 50491, 46887, 58967, 49891, 39875, 52897, 46541, 43240, 58039, 50206, 53485, 46607, 56545, 40804, 48672, 42333, 43547, 49334, 48108, 39639, 48662, 43888, 50161, 47213, 56535, 51073, 50137, 57767, 50225, 39319, 57409, 43831, 52589, 49545, 38682, 48653, 55594, 47476, 56247, 54449, 59267, 45682, 52297, 48721, 54135, 53220, 45964, 47467, 58977, 56197, 51097, 44147, 51085, 51089, 55017, 48418, 38412, 51394, 41390, 42605, 40242, 59867, 39917, 48124, 46231, 48368, 61365, 47746, 46529, 52949, 63121, 55636, 53786, 40828, 60435, 54409, 44413, 48105, 43879, 54372, 67093, 51368, 58985, 47756, 51091, 51708, 46229, 43852, 41417, 44459, 47443, 48085, 54766, 41140, 51097, 44412, 46848]
plt.title(f"Cost Histogram Random Algorithm (Chip {chip_id}, Net {net_id}) - {len(total_costs)}/{iterations} valid solutions")
plt.hist(total_costs, color='blue', bins=35)
plt.xlabel("Cost")
plt.ylabel("Frequency")

distrib_path = os.path.join(OUTPUT_FOLDER, "distributions")
save_name = f"cost_distrib_random_chip_{chip_id}_net{net_id}"
save_path = os.path.join(distrib_path, save_name)
plt.savefig(save_path)

