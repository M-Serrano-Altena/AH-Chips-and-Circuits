import os
import sys

# add the base folder to sys so that the modules are found
current_dir = os.path.dirname(__file__)
base_folder = os.path.join(current_dir, "..")
os.chdir(base_folder)
sys.path.append(base_folder)

from src.classes.chip import Chip
from src.algorithms.utils import COLLISION_COST, save_object_to_json_file, load_object_from_json_file
from src.algorithms import random_algo as ra
from src.algorithms.A_star import A_star
import matplotlib.pyplot as plt
from brokenaxes import brokenaxes
import numpy as np

OUTPUT_FOLDER = "output"

base_data_path = r"source_data/"
chip_id = 0
net_id = 1

if len(sys.argv) >= 2:
    chip_id = sys.argv[1]

if len(sys.argv) == 3:
    net_id = sys.argv[2]


iterations = 0
total_costs = []
total_intersections = []

chip = Chip(base_data_path, chip_id=chip_id, net_id=net_id, output_folder=OUTPUT_FOLDER)
algorithm = A_star(chip, shuffle_wires=True)

for i in range(iterations):
    algorithm.run()
    if not chip.is_fully_connected():
        chip.reset_all_wires()
        continue

    cost = chip.calc_total_grid_cost()
    total_costs.append(cost)

    print(f"{i}: {cost}")

    intersections = chip.get_wire_intersect_amount()
    total_intersections.append(intersections)

    chip.reset_all_wires()

print(total_costs)
print()
print(total_intersections)
distrib_path = os.path.join(OUTPUT_FOLDER, "distributions")

save_name_costs = f"total_costs_astar_chip_{chip_id}_net_{net_id}"
save_path_costs = os.path.join(distrib_path, save_name_costs)

save_name_intersections = f"total_intersections_astar_chip_{chip_id}_net_{net_id}"
save_path_intersections = os.path.join(distrib_path, save_name_intersections)

# total_costs = [113390, 104320, 107612, 104890, 109452, 99476, 97372, 104934, 104954, 108238, 104034, 110964, 94364, 114586, 116978, 99182, 100428, 104620, 101590, 102204, 106722, 111222, 103698, 101888, 105808, 98892, 109100, 106770, 107012, 93740, 105240, 103998, 110310, 109146, 106422, 103722, 100702, 104914, 101246, 100650, 102526, 105830, 110926, 112482, 109460, 98232, 116344, 107312, 111830, 96760, 83200, 102480, 96500, 103714, 102506, 102824, 96180, 110972, 107348, 104264, 101598, 111842, 94364, 112148, 104316, 104622, 111534, 106090, 112462, 103992, 104618, 103692, 101564, 107006, 100408, 105210, 107944, 98544, 112480, 104334, 99490, 95842, 91670, 94938, 102494, 99490, 111506, 104620, 107032, 113936, 116066, 102168, 108214, 113678, 106164, 109722, 104026, 104022, 102476, 115472, 94042, 109748, 102788, 100382, 101316, 97640, 105832, 104612, 98894, 100126, 100042, 102190, 97994, 101602, 94616, 105582, 97086, 115800, 113680, 95554, 103704, 107038, 115480, 90714, 87436, 100700, 109142, 98304, 107004, 103414, 102170, 110034, 91318, 103436, 104288, 110618, 109152, 103408, 117890, 112472, 111844, 101868, 104916, 96470, 97084, 91958, 103716, 102520, 119652, 111252, 104608, 102232, 105484, 91962, 106118, 96164, 106412, 107928, 95218, 99798, 107032, 103964, 106112, 99480, 107896, 106092, 101586, 102200, 111526, 99202, 94694, 108518, 108512, 98578, 108560, 117018, 98588, 103688, 99508, 106728, 106720, 97078, 110332, 96780, 106432, 100992, 97988, 110014, 97956, 109160, 112418, 99182, 103062, 98840, 90754, 122086, 100982, 108232, 101902, 106082, 101292, 104648, 95308, 109110, 107678, 115478, 111006, 106106, 97366, 100722, 113686, 95876, 104920, 101590, 102852, 114226, 100400, 97074, 100692, 96454, 102778, 101320, 95884, 113028, 94386, 101892, 97388, 95238, 99802, 102514, 104646, 94064, 100728, 103414, 117316, 117274, 104632, 104924, 103096, 100104, 98576, 104026, 102484, 113694, 97656, 99178, 109146, 100976, 99486, 108816, 101594, 109734, 103118, 107598, 106728, 103100, 108214, 103952, 103390, 109758, 102824, 102480, 104910, 111832, 105560, 97976, 101570, 98598, 100066, 109140, 104604, 106982, 108558, 117556, 109198, 100672, 104254, 103372, 104596, 103712, 110050, 101042, 112464, 103392, 104320, 109420, 93748, 109116, 106426, 103402, 105520, 99194, 108210, 100108, 116076, 102480, 96476, 98590, 100982, 96458, 98278, 96782, 103372, 105186, 110644, 103404, 97662, 110340, 107330, 108222, 101274, 110640, 101578, 103384, 96154, 98284, 91972, 103406, 99168, 104348, 120572, 107052, 101310, 105498, 105836, 101896, 108218, 107352, 104294, 102184, 106126, 102494, 107936, 105202, 110632, 101622, 94382, 106428, 104640, 105770, 116664, 97980, 104016, 98906, 103724, 109420, 102218, 107916, 106718, 107014, 94356, 96772, 105458, 101628, 98914, 100716, 95858, 102518, 93488, 115444, 95294, 92266, 114582, 109432, 105542, 98584, 102210, 106734, 94380, 109122, 87124, 104332, 109768, 113056, 103130, 102492, 101604, 96208, 104902, 106154, 102208, 99154, 93472, 93748, 95870, 95898, 110322, 99178, 107952, 112434, 97682, 113372, 98582, 111246, 107920, 107946, 98592, 101572, 94074, 110336, 98266, 96178, 116098, 108570, 96158, 90412, 116950, 105798, 98284, 101904, 100666, 116660, 105220, 102188, 113052, 110040, 104930, 98318, 101562, 101888, 104602, 102806, 100092, 97376, 100052, 98884, 111876, 107616, 101886, 119060, 102494, 105850, 101004, 108254, 116968, 104900, 105832, 112162, 93144, 97656, 106434, 93430, 101886, 96804, 104908, 107644, 100374, 96162, 108504, 108534, 98580, 110914, 103758, 102158, 102808, 103052, 106744, 129926, 106098, 113664, 98848, 91944, 107932, 89542, 117254, 109428, 94058, 98324, 107050, 103738, 99754, 99764, 111216, 96752, 114574, 99774, 95588, 102516, 104042, 84132, 93480, 106160, 113968, 104596, 106992, 110908, 110662, 95546, 104302, 100714, 96150, 102460, 100670, 105220, 88930, 100384, 102818, 107032, 105816, 98298, 95572, 102508, 102220, 106430, 99478, 104002, 112488, 105824, 103418, 99492, 102792, 107658, 103390, 98588, 96470, 101908, 94052, 107924, 108536, 97082, 100414, 108832, 104026, 97070, 110066, 98276, 97372, 100660, 93156, 105824, 96774, 105796, 105494, 102808, 105184, 112136, 105542, 100998, 99462, 94076, 96492, 94652, 92840, 95882, 108834, 100052, 101596, 96502, 105202, 103146, 110034, 98888, 112766, 102204, 98294, 107014, 104012, 104880, 97056, 108854, 112782, 95584, 97384, 108186, 102212, 113672, 101322, 107592]
# total_intersections = [374, 344, 355, 346, 361, 328, 321, 346, 346, 357, 343, 366, 311, 378, 386, 327, 331, 345, 335, 337, 352, 367, 342, 336, 349, 326, 360, 352, 353, 309, 347, 343, 364, 360, 351, 342, 332, 346, 334, 332, 338, 349, 366, 371, 361, 324, 384, 354, 369, 319, 274, 338, 318, 342, 338, 339, 317, 366, 354, 344, 335, 369, 311, 370, 344, 345, 368, 350, 371, 343, 345, 342, 335, 353, 331, 347, 356, 325, 371, 344, 328, 316, 302, 313, 338, 328, 368, 345, 353, 376, 383, 337, 357, 375, 350, 362, 343, 343, 338, 381, 310, 362, 339, 331, 334, 322, 349, 345, 326, 330, 330, 337, 323, 335, 312, 348, 320, 382, 375, 315, 342, 353, 381, 299, 288, 332, 360, 324, 353, 341, 337, 363, 301, 341, 344, 365, 360, 341, 389, 371, 369, 336, 346, 318, 320, 303, 342, 338, 395, 367, 345, 337, 348, 303, 350, 317, 351, 356, 314, 329, 353, 343, 350, 328, 356, 350, 335, 337, 368, 327, 312, 358, 358, 325, 358, 386, 325, 342, 328, 352, 352, 320, 364, 319, 351, 333, 323, 363, 323, 360, 371, 327, 340, 326, 299, 403, 333, 357, 336, 350, 334, 345, 314, 360, 355, 381, 366, 350, 321, 332, 375, 316, 346, 335, 339, 377, 331, 320, 332, 318, 339, 334, 316, 373, 311, 336, 321, 314, 329, 338, 345, 310, 332, 341, 387, 387, 345, 346, 340, 330, 325, 343, 338, 375, 322, 327, 360, 333, 328, 359, 335, 362, 340, 355, 352, 340, 357, 343, 341, 362, 339, 338, 346, 369, 348, 323, 335, 325, 330, 360, 345, 353, 358, 388, 360, 332, 344, 341, 345, 342, 363, 333, 371, 341, 344, 361, 309, 360, 351, 341, 348, 327, 357, 330, 383, 338, 318, 325, 333, 318, 324, 319, 341, 347, 365, 341, 322, 364, 354, 357, 334, 365, 335, 341, 317, 324, 303, 341, 327, 344, 398, 353, 334, 348, 349, 336, 357, 354, 344, 337, 350, 338, 356, 347, 365, 335, 311, 351, 345, 349, 385, 323, 343, 326, 342, 361, 337, 356, 352, 353, 311, 319, 348, 335, 326, 332, 316, 338, 308, 381, 314, 304, 378, 361, 348, 325, 337, 352, 311, 360, 287, 344, 362, 373, 340, 338, 335, 317, 346, 350, 337, 327, 308, 309, 316, 316, 364, 327, 356, 371, 322, 374, 325, 367, 356, 356, 325, 335, 310, 364, 324, 317, 383, 358, 317, 298, 386, 349, 324, 336, 332, 385, 347, 337, 373, 363, 346, 324, 335, 336, 345, 339, 330, 321, 330, 326, 369, 355, 336, 393, 338, 349, 333, 357, 386, 346, 349, 370, 307, 322, 351, 308, 336, 319, 346, 355, 331, 317, 358, 358, 325, 366, 342, 337, 339, 340, 352, 429, 350, 375, 326, 303, 356, 295, 387, 361, 310, 324, 353, 342, 329, 329, 367, 319, 378, 329, 315, 338, 343, 277, 308, 350, 376, 345, 353, 366, 365, 315, 344, 332, 317, 338, 332, 347, 293, 331, 339, 353, 349, 324, 315, 338, 337, 351, 328, 343, 371, 349, 341, 328, 339, 355, 341, 325, 318, 336, 310, 356, 358, 320, 331, 359, 343, 320, 363, 324, 321, 332, 307, 349, 319, 349, 348, 339, 347, 370, 348, 333, 328, 310, 318, 312, 306, 316, 359, 330, 335, 318, 347, 340, 363, 326, 372, 337, 324, 353, 343, 346, 320, 359, 372, 315, 321, 357, 337, 375, 334, 355]

# save_object_to_json_file(total_costs, save_path_costs)
# save_object_to_json_file(total_intersections, save_path_intersections)

load_path_costs = ""
if not load_path_costs:
    load_path_costs = save_path_costs

load_path_intersections = ""
if not load_path_intersections:
    load_path_intersections = save_path_intersections

total_costs = load_object_from_json_file(load_path_costs)
total_intersections = load_object_from_json_file(load_path_intersections)

bins = 59

fig = plt.figure()
plt.title(f"Cost Histogram A* Algorithm (Chip {chip_id}, Net {net_id})")
plt.hist(total_costs, bins=bins, color='blue')
plt.xlabel("Cost")
plt.ylabel("Frequency")

save_name_hist_cost = f"cost_distrib_astar_chip_{chip_id}_net{net_id}"
save_path_hist_cost = os.path.join(distrib_path, save_name_hist_cost)
plt.savefig(save_path_hist_cost)

fig = plt.figure()
plt.title(f"Intersections Histogram A* Algorithm (Chip {chip_id}, Net {net_id})")
plt.hist(total_intersections, bins=bins, color='green')
plt.xlabel("Intersections")
plt.ylabel("Frequency")

save_name_hist_intersections = f"intersections_distrib_astar_chip_{chip_id}_net{net_id}"
save_path_hist_intersections = os.path.join(distrib_path, save_name_hist_intersections)
plt.savefig(save_path_hist_intersections)